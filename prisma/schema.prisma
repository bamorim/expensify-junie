// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    memberships   Membership[]
    invitations   Invitation[] @relation("InvitationRecipient")
    sentInvitations Invitation[] @relation(name: "InvitationInviter", fields: [], references: [])
}

model Organization {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    memberships Membership[]
    invitations Invitation[]

    @@index([name])
}

enum Role {
    ADMIN
    MEMBER
}

model Membership {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    org       Organization @relation(fields: [orgId], references: [id])
    orgId     String
    role      Role
    createdAt DateTime @default(now())

    @@unique([userId, orgId])
    @@index([orgId])
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    EXPIRED
    CANCELED
}

model Invitation {
    id         String   @id @default(cuid())
    org        Organization @relation(fields: [orgId], references: [id])
    orgId      String
    email      String
    token      String   @unique
    inviter    User?    @relation(name: "InvitationInviter", fields: [inviterId], references: [id])
    inviterId  String?
    recipient  User?    @relation("InvitationRecipient", fields: [recipientId], references: [id])
    recipientId String?
    status     InvitationStatus @default(PENDING)
    createdAt  DateTime @default(now())
    expiresAt  DateTime

    @@index([orgId, email])
    @@unique([orgId, email, status])
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
